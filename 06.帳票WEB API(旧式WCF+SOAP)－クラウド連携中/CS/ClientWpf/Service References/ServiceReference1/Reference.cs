//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientWpf.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        ClientWpf.ServiceReference1.CompositeType GetDataUsingDataContract(ClientWpf.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ClientWpf.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ClientWpf.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports単純なサンプル", ReplyAction="http://tempuri.org/IService1/getReports単純なサンプルResponse")]
        byte[] getReports単純なサンプル();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports単純なサンプル", ReplyAction="http://tempuri.org/IService1/getReports単純なサンプルResponse")]
        System.Threading.Tasks.Task<byte[]> getReports単純なサンプルAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports10の倍数", ReplyAction="http://tempuri.org/IService1/getReports10の倍数Response")]
        byte[] getReports10の倍数();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports10の倍数", ReplyAction="http://tempuri.org/IService1/getReports10の倍数Response")]
        System.Threading.Tasks.Task<byte[]> getReports10の倍数Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports見積書", ReplyAction="http://tempuri.org/IService1/getReports見積書Response")]
        byte[] getReports見積書();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports見積書", ReplyAction="http://tempuri.org/IService1/getReports見積書Response")]
        System.Threading.Tasks.Task<byte[]> getReports見積書Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports郵便番号", ReplyAction="http://tempuri.org/IService1/getReports郵便番号Response")]
        byte[] getReports郵便番号();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports郵便番号", ReplyAction="http://tempuri.org/IService1/getReports郵便番号Response")]
        System.Threading.Tasks.Task<byte[]> getReports郵便番号Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports広告", ReplyAction="http://tempuri.org/IService1/getReports広告Response")]
        byte[] getReports広告();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports広告", ReplyAction="http://tempuri.org/IService1/getReports広告Response")]
        System.Threading.Tasks.Task<byte[]> getReports広告Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports請求書", ReplyAction="http://tempuri.org/IService1/getReports請求書Response")]
        byte[] getReports請求書();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports請求書", ReplyAction="http://tempuri.org/IService1/getReports請求書Response")]
        System.Threading.Tasks.Task<byte[]> getReports請求書Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports商品一覧", ReplyAction="http://tempuri.org/IService1/getReports商品一覧Response")]
        byte[] getReports商品一覧();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getReports商品一覧", ReplyAction="http://tempuri.org/IService1/getReports商品一覧Response")]
        System.Threading.Tasks.Task<byte[]> getReports商品一覧Async();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientWpf.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientWpf.ServiceReference1.IService1>, ClientWpf.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ClientWpf.ServiceReference1.CompositeType GetDataUsingDataContract(ClientWpf.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ClientWpf.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(ClientWpf.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public byte[] getReports単純なサンプル() {
            return base.Channel.getReports単純なサンプル();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports単純なサンプルAsync() {
            return base.Channel.getReports単純なサンプルAsync();
        }
        
        public byte[] getReports10の倍数() {
            return base.Channel.getReports10の倍数();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports10の倍数Async() {
            return base.Channel.getReports10の倍数Async();
        }
        
        public byte[] getReports見積書() {
            return base.Channel.getReports見積書();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports見積書Async() {
            return base.Channel.getReports見積書Async();
        }
        
        public byte[] getReports郵便番号() {
            return base.Channel.getReports郵便番号();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports郵便番号Async() {
            return base.Channel.getReports郵便番号Async();
        }
        
        public byte[] getReports広告() {
            return base.Channel.getReports広告();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports広告Async() {
            return base.Channel.getReports広告Async();
        }
        
        public byte[] getReports請求書() {
            return base.Channel.getReports請求書();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports請求書Async() {
            return base.Channel.getReports請求書Async();
        }
        
        public byte[] getReports商品一覧() {
            return base.Channel.getReports商品一覧();
        }
        
        public System.Threading.Tasks.Task<byte[]> getReports商品一覧Async() {
            return base.Channel.getReports商品一覧Async();
        }
    }
}
